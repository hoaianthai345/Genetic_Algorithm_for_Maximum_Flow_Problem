from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QTableWidget, QTableWidgetItem,
    QHeaderView, QHBoxLayout, QFrame, QPushButton, QGridLayout
)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from logic.ford_fulkerson import FordFulkersonSolver, compare_ga_with_optimal


class ResultPanel(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.current_graph_edges = None
        self.source_node = None
        self.sink_node = None
        self.ga_solution = None
        self.ff_solution = None
        self.graph_editor = None  # Sẽ được set bởi main_window

    def set_graph_editor(self, graph_editor):
        """Cài đặt tham chiếu đến graph_editor để hiển thị luồng"""
        self.graph_editor = graph_editor

    def init_ui(self):
        layout = QVBoxLayout()

        # GA Results Section
        ga_layout = QVBoxLayout()
        self.ga_label = QLabel("Kết quả thuật toán di truyền")
        self.ga_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        ga_layout.addWidget(self.ga_label)

        # Metrics section
        metrics_frame = QFrame()
        metrics_frame.setFrameShape(QFrame.StyledPanel)
        metrics_frame.setStyleSheet("background-color: #f8f9fa; border-radius: 5px;")
        metrics_layout = QGridLayout(metrics_frame)
        
        # Execution time
        metrics_layout.addWidget(QLabel("Thời gian thực thi:"), 0, 0)
        self.execution_time_label = QLabel("N/A")
        metrics_layout.addWidget(self.execution_time_label, 0, 1)
        
        # Convergence metrics
        metrics_layout.addWidget(QLabel("Thế hệ cuối cùng cải thiện:"), 0, 2)
        self.last_improvement_gen_label = QLabel("N/A")
        metrics_layout.addWidget(self.last_improvement_gen_label, 0, 3)
        
        metrics_layout.addWidget(QLabel("Tổng số thế hệ:"), 1, 0)
        self.total_generations_label = QLabel("N/A")
        metrics_layout.addWidget(self.total_generations_label, 1, 1)
        
        metrics_layout.addWidget(QLabel("Tỷ lệ hội tụ:"), 1, 2)
        self.convergence_speed_label = QLabel("N/A")
        metrics_layout.addWidget(self.convergence_speed_label, 1, 3)
        
        ga_layout.addWidget(metrics_frame)

        # Biểu đồ fitness
        self.figure = Figure(figsize=(4, 2))
        self.canvas = FigureCanvas(self.figure)
        ga_layout.addWidget(self.canvas)

        # Bảng top 5 lời giải
        self.table = QTableWidget()
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["Fitness", "Flow từ nguồn", "Flow vào đích"])
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        ga_layout.addWidget(self.table)
        
        # Comparison Section
        comparison_layout = QVBoxLayout()
        comparison_label = QLabel("So sánh với Ford-Fulkerson")
        comparison_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        comparison_layout.addWidget(comparison_label)
        
        # Comparison details
        comparison_details = QHBoxLayout()
        
        # GA results box
        ga_box = QFrame()
        ga_box.setFrameShape(QFrame.StyledPanel)
        ga_box.setStyleSheet("background-color: #f0f0f0; border-radius: 5px;")
        ga_box_layout = QVBoxLayout(ga_box)
        ga_box_layout.addWidget(QLabel("Kết quả GA:"))
        self.ga_flow_label = QLabel("Max Flow: N/A")
        ga_box_layout.addWidget(self.ga_flow_label)
        comparison_details.addWidget(ga_box)
        
        # FF results box
        ff_box = QFrame()
        ff_box.setFrameShape(QFrame.StyledPanel)
        ff_box.setStyleSheet("background-color: #f0f0f0; border-radius: 5px;")
        ff_box_layout = QVBoxLayout(ff_box)
        ff_box_layout.addWidget(QLabel("Kết quả tối ưu (Ford-Fulkerson):"))
        self.ff_flow_label = QLabel("Max Flow: N/A")
        ff_box_layout.addWidget(self.ff_flow_label)
        comparison_details.addWidget(ff_box)
        
        # Optimality ratio box
        ratio_box = QFrame()
        ratio_box.setFrameShape(QFrame.StyledPanel)
        ratio_box.setStyleSheet("background-color: #f0f0f0; border-radius: 5px;")
        ratio_box_layout = QVBoxLayout(ratio_box)
        ratio_box_layout.addWidget(QLabel("Tỷ lệ tối ưu:"))
        self.ratio_label = QLabel("N/A")
        ratio_box_layout.addWidget(self.ratio_label)
        comparison_details.addWidget(ratio_box)
        
        comparison_layout.addLayout(comparison_details)
        
        # Buttons layout for comparison
        buttons_layout = QHBoxLayout()
        
        # Add run comparison button
        self.compare_button = QPushButton("So sánh với Ford-Fulkerson")
        self.compare_button.clicked.connect(self.run_comparison)
        self.compare_button.setEnabled(False)
        buttons_layout.addWidget(self.compare_button)
        
        # Add show FF solution button
        self.show_ff_button = QPushButton("Hiển thị lời giải Ford-Fulkerson")
        self.show_ff_button.clicked.connect(self.display_ff_solution)
        self.show_ff_button.setEnabled(False)
        buttons_layout.addWidget(self.show_ff_button)
        
        # Add show GA solution button
        self.show_ga_button = QPushButton("Hiển thị lại lời giải GA")
        self.show_ga_button.clicked.connect(self.display_ga_solution)
        self.show_ga_button.setEnabled(False)
        buttons_layout.addWidget(self.show_ga_button)
        
        comparison_layout.addLayout(buttons_layout)
        
        # Add layouts to main layout
        layout.addLayout(ga_layout)
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        layout.addWidget(separator)
        layout.addLayout(comparison_layout)
        
        self.setLayout(layout)

    def update_results(self, fitness_history, top_5, best_solution, graph_edges=None, source=None, sink=None, metrics=None):
        # Store current graph and solution for later comparison
        if graph_edges is not None:
            self.current_graph_edges = graph_edges
            self.source_node = source
            self.sink_node = sink
            self.ga_solution = best_solution
            self.compare_button.setEnabled(True)
        
        # Cập nhật các metrics
        if metrics:
            # Thời gian thực thi
            execution_time = metrics.get("execution_time", 0)
            self.execution_time_label.setText(f"{execution_time:.3f} giây")
            
            # Thông tin hội tụ
            last_improvement_gen = metrics.get("last_improvement_gen", 0)
            total_generations = metrics.get("total_generations", 0)
            convergence_speed = metrics.get("convergence_speed", 0)
            
            self.last_improvement_gen_label.setText(f"{last_improvement_gen}")
            self.total_generations_label.setText(f"{total_generations}")
            
            # Hiển thị tỷ lệ hội tụ với màu sắc
            conv_text = f"{convergence_speed:.2f}"
            if convergence_speed < 0.5:
                self.convergence_speed_label.setStyleSheet("color: green; font-weight: bold;")
            elif convergence_speed < 0.8:
                self.convergence_speed_label.setStyleSheet("color: orange; font-weight: bold;")
            else:
                self.convergence_speed_label.setStyleSheet("color: red; font-weight: bold;")
            self.convergence_speed_label.setText(conv_text)
            
        # Cập nhật biểu đồ fitness
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        ax.plot(fitness_history, label="Fitness theo thế hệ", color="blue")
        
        # Đánh dấu thế hệ cuối cùng có cải thiện nếu có metrics
        if metrics and "last_improvement_gen" in metrics and fitness_history:
            last_gen = metrics["last_improvement_gen"]
            if last_gen < len(fitness_history):
                ax.axvline(x=last_gen, color='r', linestyle='--', alpha=0.7)
                ax.annotate('Hội tụ', xy=(last_gen, fitness_history[last_gen]),
                           xytext=(last_gen+5, fitness_history[last_gen]), 
                           arrowprops=dict(facecolor='red', shrink=0.05))
                
        ax.set_xlabel("Thế hệ")
        ax.set_ylabel("Fitness")
        ax.grid(True)
        ax.legend()
        self.canvas.draw()

        # Cập nhật bảng kết quả
        self.table.setRowCount(len(top_5))
        for i, (fitness, source_outflow, sink_inflow) in enumerate(top_5):
            self.table.setItem(i, 0, QTableWidgetItem(f"{fitness}"))
            self.table.setItem(i, 1, QTableWidgetItem(f"{source_outflow}"))
            self.table.setItem(i, 2, QTableWidgetItem(f"{sink_inflow}"))
            
        # Cập nhật label
        source_flow = sum(flow for (u, v), flow in best_solution.items() if u == self.source_node)
        sink_flow = sum(flow for (u, v), flow in best_solution.items() if v == self.sink_node)
        self.ga_label.setText(f"Kết quả thuật toán di truyền: Max Flow = {source_flow}")
        self.ga_flow_label.setText(f"Max Flow: {source_flow}")

    def run_comparison(self):
        """Run Ford-Fulkerson and compare with GA results"""
        if not self.current_graph_edges or not self.ga_solution:
            return
            
        comparison_results = compare_ga_with_optimal(
            self.current_graph_edges,
            self.source_node,
            self.sink_node,
            self.ga_solution
        )
        
        # Update comparison labels
        ga_flow = comparison_results["ga_max_flow"]
        optimal_flow = comparison_results["optimal_max_flow"]
        ratio = comparison_results["optimality_ratio"]
        
        # Store FF solution for later display
        self.ff_solution = comparison_results["optimal_flow"]
        
        self.ga_flow_label.setText(f"Max Flow: {ga_flow}")
        self.ff_flow_label.setText(f"Max Flow: {optimal_flow}")
        
        # Format and color the ratio based on performance
        ratio_text = f"{ratio:.2f}%"
        if ratio >= 95:
            self.ratio_label.setStyleSheet("color: green; font-weight: bold;")
        elif ratio >= 80:
            self.ratio_label.setStyleSheet("color: orange; font-weight: bold;")
        else:
            self.ratio_label.setStyleSheet("color: red; font-weight: bold;")
            
        self.ratio_label.setText(ratio_text)
        
        # Enable solution display buttons
        self.show_ff_button.setEnabled(True)
        self.show_ga_button.setEnabled(True)

    def display_ff_solution(self):
        """Hiển thị lời giải của Ford-Fulkerson trên đồ thị"""
        if self.graph_editor and self.ff_solution:
            self.graph_editor.display_flow(self.ff_solution)
            
    def display_ga_solution(self):
        """Hiển thị lại lời giải của GA trên đồ thị"""
        if self.graph_editor and self.ga_solution:
            self.graph_editor.display_flow(self.ga_solution)
